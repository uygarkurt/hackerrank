#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

int sockMerchant(int n, vector<int> ar) {
    int sum=0;
    vector<int>mem;
    for(int counter1=0; counter1<ar.size(); counter1++)
    {
        bool checker=true;
        int counter3=0;
        for(int counter4=0; counter4<mem.size(); counter4++)
        {
            if(mem[counter4]==ar[counter1])
                checker=false;
        }
        if(checker)
            mem.push_back(ar[counter1]);
        for(int counter2=0; counter2<ar.size() && checker; counter2++)
        {
            if(ar[counter1]==ar[counter2])
            {
                counter3++;
            }
        }
        if(counter3>1 && checker)
        {
            sum+=counter3/2;
             cout<<ar[counter1]<<"\n";
                cout<<counter3/2<<"\n";
        }
       
        cout<<"\n";
    }

    return sum;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string ar_temp_temp;
    getline(cin, ar_temp_temp);

    vector<string> ar_temp = split_string(ar_temp_temp);

    vector<int> ar(n);

    for (int i = 0; i < n; i++) {
        int ar_item = stoi(ar_temp[i]);

        ar[i] = ar_item;
    }

    int result = sockMerchant(n, ar);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
